Given a linked list containing brand names of biscuits sold by a retail store, write a python function which finds and returns the total number of biscuit brands.
Note: Use the provided class and implement the problem.

#lex_auth_012742478130135040816

class Node:
    def __init__(self,data):
        self.__data=data
        self.__next=None
    
    def get_data(self):
        return self.__data
    
    def set_data(self,data):
        self.__data=data
    
    def get_next(self):
        return self.__next
    
    def set_next(self,next_node):
        self.__next=next_node
    
class LinkedList:
    def __init__(self):
        self.__head=None
        self.__tail=None
    
    def get_head(self):
        return self.__head
    
    def get_tail(self):
        return self.__tail
    
    def add(self,data):
        new_node=Node(data)
        if(self.__head is None):
            self.__head=self.__tail=new_node
        else:
            self.__tail.set_next(new_node)
            self.__tail=new_node
    
    def display(self):
        temp=self.__head
        while(temp is not None):
            print(temp.get_data())
            temp=temp.get_next()                                        
    #You can use the below __str__() to print the elements of the DS object while debugging
    def __str__(self):
        temp=self.__head
        msg=[]
        while(temp is not None):
           msg.append(str(temp.get_data()))
           temp=temp.get_next()
        msg=" ".join(msg)
        msg="Linkedlist data(Head to Tail): "+ msg
        return msg
def count_nodes(biscuit_list):
    count=0
    # Write your logic here
    return count
biscuit_list=LinkedList()
biscuit_list.add("Goodday")
biscuit_list.add("Bourbon")
biscuit_list.add("Hide&Seek")
biscuit_list.add("Nutrichoice")
print(count_nodes(biscuit_list))
                                              


Assignment:

Problem Statement
Given two lists, both having String elements, write a python program using python lists to create a new string as per the rule given below:
The first element in list1 should be merged with last element in list2, second element in list1 should be merged with second last element in list2 and so on. If an element in list1/list2 is None, then the corresponding element in the other list should be kept as it is in the merged list. 

Sample Input	
 list1=['A', 'app','a', 'd', 'ke', 'th', 'doc', 'awa']

 list2=['y','tor','e','eps','ay',None,'le','n']
Expected Output
 "An apple a day keeps the doctor away"
 
 #lex_auth_0127426166978887681375

def merge_list(list1, list2):
    merged_data=""
    #write your logic here
    return resultant_data

#Provide different values for the variables and test your program
list1=['A', 'app','a', 'd', 'ke', 'th', 'doc', 'awa']
list2=['y','tor','e','eps','ay',None,'le','n']
merged_data=merge_list(list1,list2)
print(merged_data)



Problem Statement
Consider a Car class as given in the code. Write a Service class as given in the class diagram below which performs various activities on a list of cars.
Assume that the car_list is sorted by year in ascending order. 



Method	Description
 __init__(car_list)	              Initializes the instance variable, car_list.
 find_cars_by_year(year)	      Finds and returns the list of models of all the cars with   the year as the one passed as the argument. If there are   no cars, return None.
add_cars(new_car_list)	            The new_car_list should be added to the instance   variable car_list.
                                   The car_list should be still sorted such that the years are   in ascending order.
 remove_cars_from_karnataka()	 Finds and removes all cars with registration number   beginning with “KA” from the car_list.
 
#lex_auth_0127426245709905921377

class Car:
    def __init__(self,model,year,registration_number):
        self.__model=model
        self.__year=year
        self.__registration_number=registration_number

    def get_model(self):
        return self.__model

    def get_year(self):
        return self.__year

    def get_registration_number(self):
        return self.__registration_number

    def __str__(self):
        return(self.__model+" "+self.__registration_number+" "+(str)(self.__year))

#Implement Service class here

car1=Car("WagonR",2010,"KA09 3056")
car2=Car("Beat", 2011, "MH10 6776")
car3=Car("Ritz", 2013,"KA12 9098")
car4=Car("Polo",2013,"GJ01 7854")
car5=Car("Amaze",2014,"KL07 4332")
#Add different values to the list and test the program
car_list=[car1, car2, car3, car4,car5]
#Create object of Service class, invoke the methods and test your program




Problem Statement
Given two lists, both having integer elements, write a python program using python lists to create and return a new list as per the rule given below:

If the double of an element in list1 is present in list2, then add it to the new list. 
 

Sample Input	Expected Output
 list1 - [11, 8,23,7,25, 15]
 list2 – [6, 33, 50,31, 46, 78, 16,34]	 new_list – [8,23,25]
 
#lex_auth_0127426336682147841449

def check_double(list1,list2):
    new_list=[]
    #write your logic here
    return new_list

#Provide different values for the variables and test your program
list1=[11,8,23,7,25,15]
list2=[6,33,50,31,46,78,16,34]
print(check_double(list1, list2))













Problem Statement
The Indian Cricket Board has decided to send its best players to ICC World Cup. They have chosen the best 11 players for the match.
The player’s names and their experiences in years are as given below.

 Name	 Dhoni	 Virat	 Rohit	 Raina	 Jadeja	 Ishant	 Shikhar	 Axar	 Ashwin	 Stuart	 Bhuvneshwar
 Experience	15	10	12	11	13	9	8	7.5	6	7	5
The players should be sent in for the batting based on their experience, i.e. the priority would be given to the player who has got the highest experience. At the last moment, the captain has decided that the player who has got the highest experience should bat at the 4th position.

Use the Player class and players_list provided to implement the class Game as given in the class diagram.

1. In the constructor of Game class, initialize players_list with list of players

2. Display the name and experience of the players after sorting the players based on their experience(descending order)

3. Display the name and experience of the players after moving the first player (0 index position) to the 4th (3 index position) position.


#lex_auth_0127426391777280001519

class Player:
    def __init__(self,name,experience):
        self.__name=name
        self.__experience=experience

    def get_name(self):
        return self.__name

    def get_experience(self):
        return self.__experience

    def __str__(self):
        return(self.__name+" "+(str)(self.__experience))

#Implement Game class here

player1=Player("Dhoni",15)
player2=Player("Virat",10)
player3=Player("Rohit",12)
player4=Player("Raina",11)
player5=Player("Jadeja",13)
player6=Player("Ishant",9)
player7=Player("Shikhar",8)
player8=Player("Axar",7.5)
player9=Player("Ashwin",6)
player10=Player("Stuart",7)
player11=Player("Bhuvneshwar",5)
#Add different values to the list and test the program
players_list=[player1,player2,player3,player4,player5,player6,player7,player8,player9,player10,player11]
#Create object of Game class, invoke the methods and test your program


 


